Date : 2022/08/05

[알고리즘]
수학과 컴퓨터 과학, 언어학 또는 관련 분야에서
▶︎ 어떠한 문제를 해결하기 위해 정해진 일련의 절차나 방법을 공식화한 형태로 표현한것!

이 문제를 푸는 알고리즘이 무엇인지는 어떻게 알아내는 것인가?
▶︎ 따로 법칙은 없기 때문에, 각각의 알고리즘의 특징을 알고, 왜 그 알고리즘으로 다른 문제를 풀 수
있었는지를 위주로 기억해서 문제에 적용해봐야 한다.

[효율성]
얼마나 효울적인지 알고 싶을때, 무엇이 가장 중요할까?
1. 수행 시간✅
2. 사용한 메모리 
3. 코드의 길이

[문제의 크기]
항상 문제의 크기는 존재.
Ex) 게임 동시 접속자의 수
이러한 문제의 크기를 보통 N, N에 따라 걸리는 시간이 다름.
문제를 해결할 때도 문제의 크기에 따라 알맞은 방법을 선택하는 것이 좋음.
▶︎ 이러한 이유로 문제를 해결할 때는 문제의 크기를 먼저 보고 방법을 생각하자!

[시간 복잡도]
• 표기법 : 대문자 O (다양한 시간 복잡도가 많지만, 보통 Big-O만 사용)
• 입력의 크기 N에 대해서 시간이 얼마나 걸릴지 나타내는 방법
▶︎ 즉, ⌈최악의 경우에⌋ 시간이 얼마나 걸릴지 알 수 있다.
• 시간 복잡도는 소스를 보고 계산할 수도 있고, 소스를 작성하기 전에 먼저 계산해볼 수 있다.
▶︎ 문제를 풀기 전에 먼저 생각한 방법의 시간 복잡도를 계산해보고 구현하는 것이 좋다.
• 시간 복잡도 안에 가장 큰 입력 범위를 넣었을 때, 1억이 1초정도.

Ex) 총 N명의 사람이 식당에 방문했다.
식당에는 메뉴가 M개 있고, 메뉴판은 1개 있다. 
사람 1명이 메뉴판을 읽는데 걸리는 시간은 O(M).
주문한 모든 메뉴는 동시에 나왔고, 각 사람 i가 식사를 하는데 걸리는 시간은 A-i 이다.
각사람이 계산을 하는데 걸리는 시간은 O(P).
▷ 각 사람이 메뉴판에 있는 모든 메뉴를 읽는 시간 복잡도 = O(NM).
▷ 모든 사람이 식사를 마치는데 걸리는 시간 복잡도 = O(max(A-i)).
▷ 한 줄로 서서 각자 계산을 하는 시간 복잡도 = O(NP).

sum = 0
for i in range(1, N+1) : # N번
    sum += i
# 시간 복잡도 = O(N)

sum = 0
for i in range(1, N+1) : # N번
    for j in range(1, N+1) : # N번 >>> N^2번
        if i == j :
            sum += j
# 시간 복잡도 = O(N^2)

sum = 0
sum = N * (N + 1) / 2 # 1번
# 시간 복잡도 = O(1)

[시간 복잡도 계산]
• 상수는 버림.
▶︎ O(3N^2) = O(N^2)
▶︎ O(5) = O(1)
• 두가지 항이 있을 때, 변수가 같으면 큰 것만 빼고 다 버림.
▶︎ O(N^2 + N) = O(N^2)
• 두가지 항이 있는데 변수가 다르면 놔둠.
▶︎ O(N^2 + M)

[메모리]
• 메모리 제한은 보통 넉넉하기 때문에 걱정 ㄴㄴ
• 대략적으로 얼마나 공간을 사용할지 예상할 수는 있다.
• 사용한 메모리
  ◦ 보통 가장 많은 공간을 사용하는 것은 보통 배열이다.
  ◦ 배열이 사용한 공간 : 배열의 크기 ✖️ 자료형의 크기 B
    Ex) int a[10000][10000]; → 10000 ✖️ 10000 ✖️ 4B = 400,000,000B = 381.469MB

[입/출력] (Python 느리구나ㅠ)
입력 속도 비교 : https://www.acmicpc.net/blog/view/56
출력 속도 비교 : https://www.acmicpc.net/blog/view/57